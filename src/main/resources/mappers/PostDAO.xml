<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.postsystem.demo.core.dao.PostDAO">

	<insert id="insert" useGeneratedKeys="true" keyProperty="userPostId">
		INSERT INTO user_post
		(
			subject,
			description,
			created_by,
			created_date
		)
		VALUES
		(
			#{subject},
			#{description},
			#{createdBy},
			NOW()
			
		)
	</insert>
	
	<select id="getPostById" resultType="com.postsystem.demo.core.dto.PostDTO">
		SELECT 
			up.*,
			u.user_name as user_name,
			(SELECT count(*) FROM post_like where user_post_id= up.user_post_id ) as countLike
		FROM
			user_post up
	 	INNER JOIN users u ON u.user_id = up.created_by
		WHERE
			up.user_post_id = #{userPostId}
	</select>
	
	<select id="getAllPost" resultType="com.postsystem.demo.core.dto.PostDTO">
		SELECT DISTINCT
			up.*,
			u.user_name as user_name,
			(SELECT count(*) FROM post_like where user_post_id= up.user_post_id ) as countLike
		FROM
			user_post up
	 	INNER JOIN users u ON u.user_id = up.created_by
	 	
	 	LEFT JOIN post_like pl ON up.user_post_id = pl.user_post_id
	 	
	 	LEFT JOIN post_comment pm ON up.user_post_id = pm.user_post_id
	 	
	 	WHERE
	 	CASE 
	 		WHEN cast(#{search} as varchar) IS NULL THEN TRUE
	 		ELSE (LOWER(up.subject) LIKE LOWER(concat('%',#{search}::varchar,'%')) OR LOWER(up.description) LIKE LOWER(concat('%',#{search}::text,'%'))) 
	 	END

        AND
        CASE
            WHEN #{engagedPost} = 'T' THEN (pl.created_by = #{createdBy} OR pm.created_by = #{createdBy}) 
            ELSE TRUE
        END
        
        AND
        CASE
            WHEN cast(#{createdBy} as INTEGER) IS NULL OR #{engagedPost} = 'T' THEN TRUE
            ELSE up.created_by = #{createdBy}::int4
        END
        
        AND
        CASE 
	 		WHEN cast(#{dateFrom} as timestamp) IS NULL OR cast(#{dateTo} as timestamp) IS NULL THEN TRUE 
	 		ELSE up.created_date BETWEEN TO_TIMESTAMP(#{dateFrom},'YYYY-MM-DD HH24:MI:SS') and TO_TIMESTAMP(#{dateTo},'YYYY-MM-DD HH24:MI:SS') 
	 	END
        
        
	 	LIMIT #{pageSize} OFFSET #{pageNo}
	</select>
	
	<select id="getCountAllPost" resultType="com.postsystem.demo.core.dto.PostCountDTO">
		WITH get AS
		(
			SELECT DISTINCT up.*
			FROM
				user_post up
		 	INNER JOIN users u ON u.user_id = up.created_by
		 	
		 	LEFT JOIN post_like pl ON up.user_post_id = pl.user_post_id
		 	
		 	LEFT JOIN post_comment pm ON up.user_post_id = pm.user_post_id
		 	
		 	WHERE
		 	CASE 
		 		WHEN cast(#{search} as varchar) IS NULL THEN TRUE
		 		ELSE (LOWER(up.subject) LIKE LOWER(concat('%',#{search}::varchar,'%')) OR LOWER(up.description) LIKE LOWER(concat('%',#{search}::text,'%'))) 
		 	END
	
	        AND
	        CASE
	            WHEN #{engagedPost} = 'T' THEN (pl.created_by = #{createdBy} OR pm.created_by = #{createdBy}) 
	            ELSE TRUE
	        END
	        
	        AND
	        CASE
	            WHEN cast(#{createdBy} as INTEGER) IS NULL OR #{engagedPost} = 'T' THEN TRUE
	            ELSE up.created_by = #{createdBy}::int4
	        END
	        
	        AND
	        CASE 
		 		WHEN cast(#{dateFrom} as timestamp) IS NULL OR cast(#{dateTo} as timestamp) IS NULL THEN TRUE 
		 		ELSE up.created_date BETWEEN TO_TIMESTAMP(#{dateFrom},'YYYY-MM-DD HH24:MI:SS') and TO_TIMESTAMP(#{dateTo},'YYYY-MM-DD HH24:MI:SS') 
		 	END
			
		)SELECT count(*) as count FROM get
		
	</select>
	
	
	
	
</mapper>